HeartAttack == 1 ~ 1,
Stroke == 1 ~ 1,
HeartFailure == 1 ~ 1,
CoronaryDisease == 1 ~ 1,
HeartAttack == 1 & Stroke == 1 & HeartFailure == 1 & CoronaryDisease == 1 ~ 1,
HeartAttack == 2 & Stroke == 2 & HeartFailure == 2 & CoronaryDisease == 2 ~ 0))
# Convert all Refused/Don't Know values to Null
cvd_data <- replace_values_with_NA(cvd_data, c("HeartAttack", "Stroke", "CoronaryDisease", "HeartFailure"), c(7, 9))
# Nutritional Data
nutrition_data <- read_xpt("raw data/15-16/DBQ_I.XPT")
nutrition_data <- nutrition_data %>%
select(SEQN, DBD900) %>%
rename(PatientID = SEQN, FastFood = DBD900)
# Convert all Refused/Don't Know values to Null
nutrition_data <- replace_values_with_NA(nutrition_data, c("FastFood"), c(7777, 9999))
# FastFood = 5555 means >21 meals fastfood
nutrition_data$FastFood[nutrition_data$FastFood == 5555] <- 22
# Food Security Data
foodsecurity_data <- read_xpt("raw data/15-16/FSQ_I.XPT")
foodsecurity_data <- foodsecurity_data %>%
select(SEQN, FSD032C, FSD032D, FSDHH) %>%
rename(PatientID = SEQN, BalancedMeals = FSD032C, LowCost = FSD032D, FoodSecurity = FSDHH)
# Convert all Refused/Don't Know values to Null
foodsecurity_data <- replace_values_with_NA(foodsecurity_data, c("BalancedMeals", "LowCost"), c(7, 9))
# Recoding columns
foodsecurity_data <- foodsecurity_data %>%
mutate(BalancedMeals = case_when(
BalancedMeals == 3 ~ 0,
BalancedMeals == 2 ~ 1,
BalancedMeals == 1 ~ 2),
LowCost = case_when(
LowCost == 3 ~ 0,
LowCost == 2 ~ 1,
LowCost == 1 ~ 2),
FoodSecurity = case_when(
FoodSecurity == 1 ~ 0,
FoodSecurity == 2 ~ 1,
FoodSecurity == 3 ~ 2,
FoodSecurity == 4 ~ 3))
# Combine all Data
dfs <- list(demo_data, chol_data, bp_data, bp_med_data, diabetes_data, smoking_data, cvd_data, nutrition_data, foodsecurity_data)
df_15_16 <- dfs %>%
reduce(full_join, by="PatientID")
# Convert ones and twos to zeroes and ones
df_15_16 <- convert_ones_and_twos(df_15_16, c("BPMed", "Diabetes", "HeartAttack", "Stroke", "CoronaryDisease", "HeartFailure"))
# Writing data to a CSV file
write.csv(df_15_16, "Cleaned Data/15_16_cleaned.csv")
View(df_15_16)
# Load in Libraries
library(NHANES)
library(ggplot2)
library(dplyr)
library(haven)
knitr::opts_knit$set(root.dir = '/Users/noreenmayat/Desktop/Senior Project')
# Functions to convert Refused/Don't Know values to Null
replace_values_with_NA <- function(df, col_names, vals) {
for (col_name in col_names) {
# Replace specified values with NA in the given column
df[[col_name]][df[[col_name]] %in% vals] <- NA
}
# Return the modified data
return(df)
}
# Functions to recode 1/2 binary values to 0/1 binary
convert_ones_and_twos <- function(data, col_names) {
# Loop through each specified column
for (col_name in col_names) {
# Convert 1 to 0 and 2 to 1 in the current column
data[[col_name]][data[[col_name]] == 1] <- 0
data[[col_name]][data[[col_name]] == 2] <- 1
}
# Return the modified dataframe
return(data)
}
# Demographic Data
# A lot of this data (ex. age, sex, race) is already being leveraged in computing current ASCVD scores
demo_data <- read_xpt("raw data/17-18/DEMO_J.XPT")
# Select and rename relevant columns
demo_data <- demo_data %>%
select(SEQN, RIDAGEYR, RIAGENDR, RIDRETH1, RIDRETH3, INDFMIN2, INDHHIN2, INDFMPIR) %>%
rename(PatientID = SEQN, Age = RIDAGEYR, Sex = RIAGENDR, Race1 = RIDRETH1, Race2 = RIDRETH3, Ann_FamIncome = INDFMIN2, Ann_HHIncome = INDHHIN2, PovertyRatio = INDFMPIR) %>%
mutate(Sex = case_when(
Sex == 1 ~ "male",
Sex == 2 ~ "female"
),
Race1 = case_when(
Race1 == 1 | Race1 == 2 | Race1 == 5 ~ "other",
Race1 == 3 ~ "white",
Race1 == 4 ~ 'aa'
),
Race2 = case_when(
Race2 == 1 ~ 0,
Race2 == 2 ~ 1,
Race2 == 3 ~ 2,
Race2 == 4 ~ 3,
Race2 == 5 ~ 4,
Race2 == 6 ~ 5,
Race2 == 7 ~ 6
),
Ann_FamIncome = case_when(
Ann_FamIncome == 1 ~ 0,
Ann_FamIncome == 2 ~ 1,
Ann_FamIncome == 3 ~ 2,
Ann_FamIncome == 4 ~ 3,
Ann_FamIncome == 5 ~ 4,
Ann_FamIncome == 6 ~ 5,
Ann_FamIncome == 7 ~ 6,
Ann_FamIncome == 8 ~ 7,
Ann_FamIncome == 9 ~ 8,
Ann_FamIncome == 10 ~ 9,
Ann_FamIncome == 14 ~ 10,
Ann_FamIncome == 15 ~ 11
),
Ann_HHIncome = case_when(
Ann_HHIncome == 1 ~ 0,
Ann_HHIncome == 2 ~ 1,
Ann_HHIncome == 3 ~ 2,
Ann_HHIncome == 4 ~ 3,
Ann_HHIncome == 5 ~ 4,
Ann_HHIncome == 6 ~ 5,
Ann_HHIncome == 7 ~ 6,
Ann_HHIncome == 8 ~ 7,
Ann_HHIncome == 9 ~ 8,
Ann_HHIncome == 10 ~ 9,
Ann_HHIncome == 14 ~ 10,
Ann_HHIncome == 15 ~ 11
)
)
# Convert all Refused/Don't Know values to Null
demo_data <- replace_values_with_NA(demo_data, c("Ann_FamIncome", "Ann_HHIncome"), c(12, 13, 77, 99))
# Cholesterol Data
# Used in ASCVD scores
# HDL and Total Levels
cholesterol_data_total <- read_xpt("raw data/17-18/TCHOL_J.XPT")
cholesterol_data_HDL <- read_xpt("raw data/17-18/HDL_J.XPT")
# Select and rename relevant columns
cholesterol_data_HDL <- cholesterol_data_HDL %>%
select(SEQN, LBDHDD) %>%
rename(PatientID = SEQN, HDLChol = LBDHDD)
cholesterol_data_total <- cholesterol_data_total %>%
select(SEQN, LBXTC) %>%
rename(PatientID = SEQN, TotalChol = LBXTC)
# Combine dataframes
chol_data <- merge(cholesterol_data_HDL, cholesterol_data_total, by='PatientID')
# Blood Pressure Data
# Used in ASCVD scores
# Do I average the readings?
bp_data <- read_xpt("raw data/17-18/BPX_J.XPT")
# Select and rename relevant columns
bp_data <- bp_data %>%
select(SEQN, BPXSY1, BPXSY2, BPXSY3, BPXSY4) %>%
rename(PatientID = SEQN, SysBP1 = BPXSY1, SysBP2 = BPXSY2, SysBP3 = BPXSY3, SysBP4 = BPXSY4)
# Averaging the readings
bp_data$AvgSysBP <- rowMeans(bp_data[, c('SysBP1', 'SysBP2', 'SysBP3', 'SysBP4')], na.rm=TRUE)
bp_data <- bp_data %>%
select(PatientID, AvgSysBP)
# On blood pressure medication
bp_med_data <- read_xpt("raw data/17-18/BPQ_J.XPT")
bp_med_data <- bp_med_data %>%
select(SEQN, BPQ050A) %>%
rename(PatientID = SEQN,  BPMed = BPQ050A)
# Convert all Refused/Don't Know values to Null
bp_data <- replace_values_with_NA(bp_data, c("AvgSysBP"), c('NaN'))
bp_med_data <- replace_values_with_NA(bp_med_data, c("BPMed"), c(7, 9))
# Diabetes Data
# Used in ASCVD scores
diabetes_data <- read_xpt("raw data/17-18/DIQ_J.XPT")
# Select and rename relevant columns
diabetes_data <- diabetes_data %>%
select(SEQN, DIQ010) %>%
rename(PatientID = SEQN, Diabetes = DIQ010)
# Convert all Refused/Don't Know values to Null
diabetes_data <- replace_values_with_NA(diabetes_data, c("Diabetes"), c(3, 7, 9))
# Smoking Status Data
# Used in ASCVD scores
smoking_data <- read_xpt("raw data/17-18/SMQ_J.XPT")
# Select and rename relevant columns
smoking_data <- smoking_data %>%
select(SEQN, SMQ040) %>%
rename(PatientID = SEQN, Smoking = SMQ040)
# Current Smoker = 1 or 2; Not Smoker = 3
smoking_data$Smoking[smoking_data$Smoking == 1 | smoking_data$Smoking == 2] <- 1
smoking_data$Smoking[smoking_data$Smoking == 3] <- 0
# CVD Data
cvd_data <- read_xpt("raw data/17-18/MCQ_J.XPT")
cvd_data <- cvd_data %>%
select(SEQN, MCQ160E, MCQ160F, MCQ160C, MCQ160B) %>%
rename(PatientID = SEQN, HeartAttack = MCQ160E, Stroke = MCQ160F, CoronaryDisease = MCQ160C, HeartFailure = MCQ160B)
# Combine stroke and heart attack columns
cvd_data <- cvd_data %>%
mutate(NegOutcome = case_when(
HeartAttack == 1 ~ 1,
Stroke == 1 ~ 1,
HeartFailure == 1 ~ 1,
CoronaryDisease == 1 ~ 1,
HeartAttack == 1 & Stroke == 1 & HeartFailure == 1 & CoronaryDisease == 1 ~ 1,
HeartAttack == 2 & Stroke == 2 & HeartFailure == 2 & CoronaryDisease == 2 ~ 0))
# Convert all Refused/Don't Know values to Null
cvd_data <- replace_values_with_NA(cvd_data, c("HeartAttack", "Stroke", "CoronaryDisease", "HeartFailure"), c(7, 9))
# Nutritional Data
nutrition_data <- read_xpt("raw data/17-18/DBQ_J.XPT")
nutrition_data <- nutrition_data %>%
select(SEQN, DBD900) %>%
rename(PatientID = SEQN, FastFood = DBD900)
# Convert all Refused/Don't Know values to Null
nutrition_data <- replace_values_with_NA(nutrition_data, c("FastFood"), c(7777, 9999))
# FastFood = 5555 means >21 meals fastfood
nutrition_data$FastFood[nutrition_data$FastFood == 5555] <- 22
# Food Security Data
foodsecurity_data <- read_xpt("raw data/17-18/FSQ_J.XPT")
foodsecurity_data <- foodsecurity_data %>%
select(SEQN, FSD032C, FSD032D, FSDHH) %>%
rename(PatientID = SEQN, BalancedMeals = FSD032C, LowCost = FSD032D, FoodSecurity = FSDHH)
# Convert all Refused/Don't Know values to Null
foodsecurity_data <- replace_values_with_NA(foodsecurity_data, c("BalancedMeals", "LowCost"), c(7, 9))
# Recoding columns
foodsecurity_data <- foodsecurity_data %>%
mutate(BalancedMeals = case_when(
BalancedMeals == 3 ~ 0,
BalancedMeals == 2 ~ 1,
BalancedMeals == 1 ~ 2),
LowCost = case_when(
LowCost == 3 ~ 0,
LowCost == 2 ~ 1,
LowCost == 1 ~ 2),
FoodSecurity = case_when(
FoodSecurity == 1 ~ 0,
FoodSecurity == 2 ~ 1,
FoodSecurity == 3 ~ 2,
FoodSecurity == 4 ~ 3))
# Combine all Data
dfs <- list(demo_data, chol_data, bp_data, bp_med_data, diabetes_data, smoking_data, cvd_data, nutrition_data, foodsecurity_data)
df_17_18 <- dfs %>%
reduce(full_join, by="PatientID")
# Convert ones and twos to zeroes and ones
df_17_18 <- convert_ones_and_twos(df_17_18, c("BPMed", "Diabetes", "HeartAttack", "Stroke"))
# Writing data to a CSV file
write.csv(df_17_18, "Cleaned Data/17_18_cleaned.csv")
# Combine all Data
dfs <- list(demo_data, chol_data, bp_data, bp_med_data, diabetes_data, smoking_data, cvd_data, nutrition_data, foodsecurity_data)
df_17_18 <- dfs %>%
reduce(full_join, by="PatientID")
# Convert ones and twos to zeroes and ones
df_17_18 <- convert_ones_and_twos(df_17_18, c("BPMed", "Diabetes", "HeartAttack", "Stroke", "CoronaryDisease", "HeartFailure"))
# Writing data to a CSV file
write.csv(df_17_18, "Cleaned Data/17_18_cleaned.csv")
# Load in Libraries
library(NHANES)
library(dplyr)
library(haven)
library(tidyverse)
library(caret)
library(tidymodels)
library(tidyverse)
library(readr)
library(corrplot)
library(CVrisk)
# For Imputing
library(mice)
library(missForest)
library(VIM)
library(softImpute)
library(ggplot2)
knitr::opts_knit$set(root.dir = '/Users/noreenmayat/Desktop/Senior Project')
## Split data before imputing
## Visualizations for logistic regression and then different model (important variables, summary statistics, scores)
# Load in Data
df_11_12 <- read.csv("Cleaned Data/11_12_cleaned.csv")
df_11_12$Year <- c(1)
df_13_14 <- read.csv("Cleaned Data/13_14_cleaned.csv")
df_13_14$Year <- c(2)
df_15_16 <- read.csv("Cleaned Data/15_16_cleaned.csv")
df_15_16$Year <- c(3)
df_17_18 <- read.csv("Cleaned Data/17_18_cleaned.csv")
df_17_18$Year <- c(4)
View(df_11_12)
View(df_13_14)
View(df_15_16)
View(df_17_18)
# Combine all Data
full_df <- bind_rows(df_11_12, df_13_14, df_15_16, df_17_18)
full_df$X <- NULL
full_df$HeartAttack <- NULL
full_df$Stroke <- NULL
full_df$CoronaryDisease <- NULL
full_df$HeartFailure <- NULL
# Factoring the outcome/target variable
full_df$NegOutcome <- factor(full_df$NegOutcome, levels = c(0, 1))
levels(full_df$NegOutcome) <- c("Non-Negative", "Negative")
View(full_df)
# Count NAs each column
na_counts <- colSums(is.na(full_df))
print(na_counts)
# Barplot showing null values
# Convert to dataframe for plotting
na_data <- as.data.frame(na_counts)
na_data$Column <- rownames(na_data)
names(na_data) <- c("NA_Count", "Column")
ggplot(na_data, aes(x = reorder(Column, NA_Count), y = NA_Count)) +
geom_bar(stat = "identity", fill = "tomato") +
theme_minimal() +
labs(title = "Missing Values in Each Column", x = "Column", y = "Number of Missing Values") +
coord_flip() # Use coord_flip() to make the plot horizontal
## Plotting the target feature
ggplot(full_df, aes(x = NegOutcome)) +
geom_bar(fill = "steelblue", color = "black") +
labs(title = "Distribution of Target Feature: Negative CVD Outcome", x = "Negative CVD Outcome", y = "Count") +
theme_minimal()
# Count of each: approvals vs. denials
count_table <- table(full_df$NegOutcome)
print(count_table)
# Calculate the percentage for each category
percentages <- prop.table(count_table) * 100
print(percentages)
# Splitting the Data
set.seed(1)
split <- initial_split(full_df, prop = 0.75, strata = "NegOutcome")
# 75%-25% split
df_train <- training(split)
df_test <- testing(split)
## Plotting the target feature
ggplot(df_train, aes(x = NegOutcome)) +
geom_bar(fill = "steelblue", color = "black") +
labs(title = "Distribution of Target Feature: Training", x = "Negative CVD Outcome", y = "Count") +
theme_minimal()
# Count of each: approvals vs. denials
count_table_train <- table(df_train$NegOutcome)
print(count_table_train)
# Calculate the percentage for each category
percentages_train <- prop.table(count_table_train) * 100
print(percentages_train)
## Plotting the target feature
ggplot(df_test, aes(x = NegOutcome)) +
geom_bar(fill = "steelblue", color = "black") +
labs(title = "Distribution of Target Feature: Testing", x = "Negative CVD Outcome", y = "Count") +
theme_minimal()
# Count of each: approvals vs. denials
count_table_test <- table(df_test$NegOutcome)
print(count_table_test)
# Calculate the percentage for each category
percentages_test <- prop.table(count_table_test) * 100
print(percentages_test)
# Impute Rest of Missing Data
imputation_fun_mice <- function(df, target){
init <- mice(df, maxit=0, remove.collinear = FALSE, remove.constant = FALSE)
# Ensure the target variable is not imputed
init$method[target] <- ""
init$predictorMatrix[, target] <- 0
imputed <- mice(df, method=init$method, predictorMatrix=init$predictorMatrix, m=5, nnet.MaxNWts = 5000, remove.collinear = FALSE, remove.constant = FALSE)
completed <- mice::complete(imputed)
return(completed)
}
imputed_train <- imputation_fun_mice(df_train, "NegOutcome")
View(df_train)
imputed_test <- imputation_fun_mice(df_test, "NegOutcome")
# Count NAs each column to make sure imputation worked
colSums(is.na(imputed_train))
colSums(is.na(imputed_test))
# Applying the function to every row for specified columns
results_train <- apply(imputed_train[, c("Race1", "Sex", "Age", "TotalChol", "HDLChol", "AvgSysBP", "BPMed", "Smoking", "Diabetes")], 1, function(row) ascvd_10y_accaha(row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9]))
View(imputed_train)
# Applying the function to every row for specified columns
results_train <- apply(imputed_train[, c("Race1", "Sex", "Age", "TotalChol", "HDLChol", "AvgSysBP", "BPMed", "Smoking", "Diabetes")], 1, function(row) ascvd_10y_accaha(row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9]))
class(pooled_coef$smoker)
print(ascvd_10y_accaha())
print(ascvd_10y_accaha
# Applying the function to every row for specified columns
results_train <- apply(imputed_train[, c("Race1", "Sex", "Age", "TotalChol", "HDLChol", "AvgSysBP", "BPMed", "Smoking", "Diabetes")], 1, function(row) ascvd_10y_accaha(row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9]))
print(ascvd_10y_accaha)
imputed_test[, c("Race1", "Sex", "Age", "TotalChol", "HDLChol", "AvgSysBP", "BPMed", "Smoking", "Diabetes")]
row[1
row[1
row[1]
x <- imputed_test[, c("Race1", "Sex", "Age", "TotalChol", "HDLChol", "AvgSysBP", "BPMed", "Smoking", "Diabetes")]
x[1]
row[1]
rm(x)
devtools::install_github("vcastro/CVrisk")
# Create a sample row as a vector (adjust values as appropriate for your function)
sample_row <- c(Race1 = "white", Sex = "male", Age = 50, TotalChol = 200, HDLChol = 50, AvgSysBP = 120, BPMed = 0, Smoking = 1, Diabetes = 0)
# Test the function with the sample row
test_result <- ascvd_10y_accaha(sample_row[1], sample_row[2], sample_row[3], sample_row[4], sample_row[5], sample_row[6], sample_row[7], sample_row[8], sample_row[9])
sample_row[8]
class(sample_row[8])
sample_row <- list(Race1 = "white", Sex = "male", Age = 50, TotalChol = 200, HDLChol = 50, AvgSysBP = 120, BPMed = 0, Smoking = as.integer(1), Diabetes = as.integer(0))
# Accessing list elements in the function call
test_result <- ascvd_10y_accaha(sample_row$Race1, sample_row$Sex, sample_row$Age, sample_row$TotalChol, sample_row$HDLChol, sample_row$AvgSysBP, sample_row$BPMed, sample_row$Smoking, sample_row$Diabetes)
# Applying the function to every row for specified columns
results_train <- apply(imputed_train[, c("Race1", "Sex", "Age", "TotalChol", "HDLChol", "AvgSysBP", "BPMed", "Smoking", "Diabetes")], 1, function(row) ascvd_10y_accaha(row[1], row[2], as.numeric(row[3]), as.numeric(row[4]), as.numeric(row[5]), as.numeric(row[6]), as.numeric(row[7]), as.numeric(row[8]), as.numeric(row[9])))
results_test <- apply(imputed_test[, c("Race1", "Sex", "Age", "TotalChol", "HDLChol", "AvgSysBP", "BPMed", "Smoking", "Diabetes")], 1, function(row) ascvd_10y_accaha(row[1], row[2], as.numeric(row[3]), as.numeric(row[4]), as.numeric(row[5]), as.numeric(row[6]), as.numeric(row[7]), as.numeric(row[8]), as.numeric(row[9])))
# Adding the result as a new column to the DataFrames
imputed_train$ASCVD <- results_train
imputed_test$ASCVD <- results_test
View(imputed_test)
View(imputed_train)
View(imputed_train)
print(ascvd_10y_accaha
;
print(ascvd_10y_accaha)
# Saving CSVs
write.csv(imputed_train, "Cleaned Data/imputed_train.csv")
getwd()
# Load in Libraries
library(NHANES)
library(dplyr)
library(haven)
library(tidyverse)
library(caret)
library(tidymodels)
library(tidyverse)
library(readr)
library(corrplot)
library(CVrisk)
# For Imputing
library(mice)
library(missForest)
library(VIM)
library(softImpute)
library(ggplot2)
knitr::opts_knit$set(root.dir = '/Users/noreenmayat/Desktop/Senior Project')
## Split data before imputing
## Visualizations for logistic regression and then different model (important variables, summary statistics, scores)
# Saving CSVs
write.csv(imputed_train, "Cleaned Data/imputed_train.csv")
write.csv(imputed_test, "Cleaned Data/imputed_test.csv")
# Load in Libraries
library(CVrisk)
library(NHANES)
library(ggplot2)
library(dplyr)
library(haven)
library(tidyverse)
library(ggplot2)
library(caret)
library(tidymodels)
# For Training
library(OpenML)
library(DT)
library(randomForest)
knitr::opts_knit$set(root.dir = '/Users/noreenmayat/Desktop/Senior Project')
# Load in Data
train_df <- read.csv("Cleaned Data/imputed_train.csv")
getwd()
# Load in Libraries
library(CVrisk)
library(NHANES)
library(ggplot2)
library(dplyr)
library(haven)
library(tidyverse)
library(ggplot2)
library(caret)
library(tidymodels)
# For Training
library(OpenML)
library(DT)
library(randomForest)
knitr::opts_knit$set(root.dir = '/Users/noreenmayat/Desktop/Senior Project')
# Load in Data
train_df <- read.csv("Cleaned Data/imputed_train.csv")
getwd()
knitr::opts_knit$set(root.dir = '/Users/noreenmayat/Desktop/Senior Project')
getwd()
# Load in Libraries
library(CVrisk)
library(NHANES)
library(ggplot2)
library(dplyr)
library(haven)
library(tidyverse)
library(ggplot2)
library(caret)
library(tidymodels)
# For Training
library(OpenML)
library(DT)
library(randomForest)
knitr::opts_knit$set(root.dir = '/Users/noreenmayat/Desktop/Senior Project')
getwd()
knitr::opts_knit$set(root.dir = '/Users/noreenmayat/Desktop/Senior Project')
getwd()
setwd('/Users/noreenmayat/Desktop/Senior Project')
getwd()
# Load in Data
train_df <- read.csv("Cleaned Data/imputed_train.csv")
# Load in Data
train_df <- read.csv("Cleaned Data/imputed_train.csv")
getwd()
# Load in Data
train_df <- read.csv("Cleaned Data/11_12_cleaned.csv")
# Load in Libraries
library(CVrisk)
library(NHANES)
library(ggplot2)
library(dplyr)
library(haven)
library(tidyverse)
library(ggplot2)
library(caret)
library(tidymodels)
# For Training
library(OpenML)
library(DT)
library(randomForest)
knitr::opts_knit$set(root.dir = '/Users/noreenmayat/Desktop/Senior Project')
## Visualizations for logistic regression and then different model (important variables, summary statistics, scores)
getwd()
# Load in Data
train_df <- read.csv("Cleaned Data/imputed_train.csv")
setwd("/Users/noreenmayat/Desktop/Senior Project/Cleaned Data")
# Load in Data
train_df <- read.csv("imputed_train.csv")
